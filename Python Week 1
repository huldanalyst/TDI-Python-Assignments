{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "30aedbf7",
   "metadata": {},
   "source": [
    "<div style=\"text-align: center;\">\n",
    "<h2><b>TDI Python for Data Analytics Week 1 Assignment</b></h2>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "125dce0e",
   "metadata": {},
   "source": [
    "**\"Welcome to Python Week 1!** <br>\n",
    "<br>\n",
    "_In this project, you will build on the foundational Python skills, you will learn about  **variables, data types, basic arithmetic, operators, and functions.** This week’s assignment  will help you practice these essential concepts that form the backbone of Python  programming for data analytics.\"_\n",
    "<br>\n",
    "<div style=\"text-align: right;\">\n",
    "- The Data Immersed (TDI) Community\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09f0aa7e",
   "metadata": {},
   "source": [
    "<br>\n",
    "<br>\n",
    "<div style = \"text-align: center;\">\n",
    "<h3><b>Questions and Answers</b></h3>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31ec3be9",
   "metadata": {},
   "source": [
    "1.\tCreate a variable “x” and assign it the integer value “10”. Create another variable “y” and assign it the float value “20.5”. Write a Python statement to add these two variables and print the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "765734b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.5\n"
     ]
    }
   ],
   "source": [
    "x = 10\n",
    "y = 20.5\n",
    "print (x + y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c769b280",
   "metadata": {},
   "source": [
    "2.\tCreate a variable “name” and assign it your name as a string. Write a Python statement to print the length of this string.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5b3047ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "name = \"Huldah\"\n",
    "print (len(name))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b5e974a",
   "metadata": {},
   "source": [
    "3.\tWrite a Python function called “calculate_area” that takes the length and width of a rectangle as arguments and returns the area. Test the function with a length of “5” and a width of “3”."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a84f1fff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "def calculate_area (length, width):\n",
    "    area = length * width\n",
    "    return area\n",
    "\n",
    "# Test the function with length 5 and width 3 \n",
    "\n",
    "Area = calculate_area(5, 3)\n",
    "print(Area)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "052bcfa3",
   "metadata": {},
   "source": [
    "4.\tGiven two variables, “a = 15” and “b = 4”, write Python code to compute and print the result of integer division and modulus operation. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1ec2e20c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 , 3\n"
     ]
    }
   ],
   "source": [
    "a = 15\n",
    "b = 4 \n",
    "print (a//b, \",\", a%b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c095d77d",
   "metadata": {},
   "source": [
    "5.\tWrite a Python statement to check if a variable “age” is greater than or equal to “18” and less than “65”. Print \"Adult\" if the condition is true, otherwise print \"Not an Adult\". \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "452dad78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adult\n"
     ]
    }
   ],
   "source": [
    "def check_age (age):\n",
    "    if age >= 18 and age < 65:\n",
    "        print (\"Adult\")\n",
    "    else: print (\"Not an Adult\")\n",
    "\n",
    "# Test the function with age 25\n",
    "\n",
    "check_age (25)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b1a9e5e",
   "metadata": {},
   "source": [
    "6.\tCreate two variables, “num1 = 12” and “num2 = 15”. Write a Python statement to check if “num1” is not equal to “num2” and print the result. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1788b7e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1 = 12\n",
    "num2 = 15\n",
    "num1 != num2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eab73ce4",
   "metadata": {},
   "source": [
    "7.\tWrite a Python function called “is_even_and_positive” that takes an integer as input and returns “True” if the number is both even and positive, otherwise returns “False”. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ba156b78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "def is_even_and_positive (int):\n",
    "    if int > 0 and int%2 == 0:\n",
    "        print (True)\n",
    "    else: print (False)\n",
    "\n",
    "# Test the function with an even positive number\n",
    "\n",
    "is_even_and_positive (26)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f3fdd24",
   "metadata": {},
   "source": [
    "8.\tGiven two boolean variables, “x = True” and “y = False”, write a Python statement to compute and print the result of the logical “AND” and “OR” operations. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "46db7997",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False , True\n"
     ]
    }
   ],
   "source": [
    "x = (True)\n",
    "y = (False)\n",
    "print (x and y, \",\", x or y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "192561a4",
   "metadata": {},
   "source": [
    "9.\tWrite a Python function called “greet” that takes a name as an argument and prints a greeting message like \"Hello, [name]!\". Call this function with your name.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5f10f36f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, Huldah!\n"
     ]
    }
   ],
   "source": [
    "def greet (name):\n",
    "    print (f\"Hello, {name}!\")\n",
    "\n",
    "# Test the function with the name \"Huldah\"\n",
    "\n",
    "greet (\"Huldah\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73a71a94",
   "metadata": {},
   "source": [
    "10.\t Create a Python function “find_max” that takes a list of numbers as input and returns the maximum number in the list. Test the function with the list “[3, 7, 2, 5, 9]”. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fbd484c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "def find_max (numberlist):\n",
    "    maxnum = max(numberlist)\n",
    "    return maxnum\n",
    "\n",
    "# Test the function with [3, 7, 2, 5, 9]\n",
    "\n",
    "Max = find_max([3, 7, 2, 5, 9])\n",
    "print (Max)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3369072",
   "metadata": {},
   "source": [
    "11.\t Write a Python statement to find and print the type of the variable “x” where “x = [1, 2, 3]”. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "492a9d20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "x = [1, 2, 3]\n",
    "print (type(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42b68456",
   "metadata": {},
   "source": [
    "12.\t Create a list of numbers “[4, 2, 9, 1]” and use an inbuilt function to sort this list in ascending order. Print the sorted list. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ebc46bf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 4, 9]\n"
     ]
    }
   ],
   "source": [
    "numbers = [4, 2, 9, 1]\n",
    "print (sorted(numbers))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe70e097",
   "metadata": {},
   "source": [
    "13.\t Write a Python function called “calculate_discount” that takes the original price and discount percentage as arguments, calculates the discounted price, and returns it. Test the function with a price of “100” and a discount of “15”. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7ffe5698",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85.0\n"
     ]
    }
   ],
   "source": [
    "def calculate_discount(price, discount):\n",
    "    dis_price = price - (price * discount / 100)\n",
    "    return dis_price\n",
    "\n",
    "# Test the function with a price of 100 and a discount of 15\n",
    "\n",
    "new_price = calculate_discount(100, 15)\n",
    "print(new_price)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d382b88b",
   "metadata": {},
   "source": [
    "14.\t Write a Python script that prompts the user to enter their age and prints whether they are a minor (age < 18) or an adult (age >= 18). Use comparison and logical operators in your solution. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3e239d95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adult\n"
     ]
    }
   ],
   "source": [
    "def adult_minor (age):\n",
    "    if age < 18:\n",
    "        print (\"Minor\")\n",
    "    else:\n",
    "        print (\"Adult\")\n",
    "\n",
    "# Test the function with age 18      \n",
    "\n",
    "adult_minor (18)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "784d96b2",
   "metadata": {},
   "source": [
    "15.\t Create a function called “string_statistics” that takes a string as input and returns a tuple containing the length of the string, the string in uppercase, and the string in lowercase. Test the function with the string \"Python Programming\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fbe715fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18, 'python programming', 'PYTHON PROGRAMMING')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def string_statistics (str):\n",
    "    return len(str), str.lower(), str.upper()\n",
    "\n",
    "# Test the function with the string \"Python Programming\"\n",
    "\n",
    "string_statistics (\"Python Programming\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
